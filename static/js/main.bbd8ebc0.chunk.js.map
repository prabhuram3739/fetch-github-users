{"version":3,"sources":["apiConfig.js","Login.js","CardUI.js","Cards.js","usersHook.js","Details.js","DataLayer.js","App.js","reducer.js","serviceWorker.js","index.js"],"names":["authGitUrl","join","fetchUsersApi","Login","className","href","src","alt","CardUI","user","owner","avatar_url","login","full_name","Cards","details","console","log","map","key","id","useUsers","React","useState","users","usersSet","allRepos","useEffect","a","apiUrl","axios","get","then","repos","data","fetchUsers","Details","DataLayerContext","createContext","DataLayer","initialState","reducer","children","Provider","value","useReducer","App","useContext","token","dispatch","hash","window","location","search","substring","split","reduce","initial","item","parts","decodeURIComponent","includes","history","pushState","_token","code","type","state","action","Boolean","hostname","match","ReactDOM","render","StrictMode","playlists","playing","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bbd8ebc0.chunk.js","sourcesContent":["//Login auth api for github\nexport const authEndpoint = \"https://github.com/login/oauth/authorize\";\nconst redirectUri = \"http://localhost:3000/\";\nconst clientId = \"81d0df957cd571853232\";\nconst scopes = [\n    \"repo\",\n];\n//Fetch users API\nexport const apiEndpoint = \"https://api.github.com/repos\";\nconst gitRepo = \"facebook/react\";\n\n//Follow a user API\n//export const followApiEndPoint = \"https://api.github.com/user/following/\";\n\n//Get the access token from the response\nexport const getTokenFromUrl = () => {\n    return window.location.search\n        .substring(1)\n        .split('&')\n        .reduce((initial, item) => {\n            //#code=mysupersecretkey&name=john&\n            let parts = item.split('=');\n            initial[parts[0]] = decodeURIComponent(parts[1]);\n            return initial;\n        }, {});\n};\n\nexport const authGitUrl = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&login=prabhuram3739&scope=${scopes.join(\"%20\")}&state=test&allow_signup=true`;\nexport const fetchUsersApi = `${apiEndpoint}/${gitRepo}/forks?client_id=${clientId}`;","import React from 'react';\nimport './Login.css';\nimport { authGitUrl } from './apiConfig';\n\nfunction Login() {\n    return ( \n        <div className = 'login'> \n            <a href = { authGitUrl } > LOGIN WITH GitHub </a>  \n            <img src = \"https://www.ateamindia.com/wp-content/uploads/2019/03/maxresdefault.jpg\" alt = \"\" / >\n        </div>\n    );\n}\n\nexport default Login;","import React from 'react';\nimport './CardUI.css';\nimport { followApiEndPoint } from './apiConfig';\n//import followUsers from './followUsersHook';\n\nfunction CardUI(user) {\n    let allRepos = \"\";\n    //let followUsersAPI = followApiEndPoint+user.user.owner.login;\n    //allRepos = followUsers(user.user.owner.login);\n    return (\n        <div className=\"card text-center shadow roundedCards\">\n            <div className=\"overflow\">\n                <img className=\"imageAlign\" src={user.user.owner.avatar_url} alt=\"user avatar\" />\n            </div>\n            <div className=\"card-body text-dark\">\n                <h4 className=\"card-title\">{user.user.owner.login}</h4>\n                <p className=\"card-text text-secondary\">\n                    {user.user.full_name}\n                </p>\n                {/*<button className=\"btn btn-primary\" onClick={allRepos.data}>Follow</button>*/}\n                <button className=\"btn btn-primary\">Follow</button>\n            </div>\n        </div>  \n    )\n}\n\nexport default CardUI;\n","import React from 'react';\nimport CardUI from './CardUI';\nimport './Cards.css';\n\nfunction Cards({details}) {\n    console.log(\"Response from Cards page:\", details);\n    return (\n        <div className=\"container-fluid d-flex justify-content-center\">\n            <div className=\"row\">\n            {/* Displaying the cards from the CardsUI component with the users data response */}\n            {details.map((user) => (\n                <div key={user.id} className=\"marginTopAlign col-md-3\">\n                    <CardUI user={user} />\n                </div>\n            ))}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Cards\n","import React, { useEffect } from 'react';\nimport axios from 'axios';\nimport { fetchUsersApi } from './apiConfig';\n\nconst useUsers = () => {\n    const [users, usersSet] = React.useState([]);\n    let allRepos = \"\";\n    //API Call to fetch the users\n    React.useEffect(() => {\n      async function fetchUsers() {\n          //API URL\n        const apiUrl = fetchUsersApi;\n        axios.get(apiUrl).then((repos) => {\n          allRepos = repos.data;\n          //Set the response to the user state\n          usersSet(allRepos);\n          return allRepos;\n        });\n      }\n      fetchUsers();\n    }, []);\n    return users;\n  };\n\n  export default useUsers;","import React from 'react';\nimport \"./Details.css\";\nimport Cards from './Cards';\nimport useUsers from './usersHook';\n\nfunction Details() {\n    let allRepos = \"\";\n    allRepos = useUsers();\n    return (\n        <div className=\"displayPage\">\n        <h4 className=\"blackHeading\">Git Repo Users for Facebook React</h4>\n            <Cards details={allRepos} />\n        </div>\n    )\n}\n\nexport default Details;\n","import React, {\n    createContext,\n    useContext,\n    useReducer\n} from \"react\";\n\nexport const DataLayerContext = createContext();\n//children is the one which gets wrapped inside the datalayer => App\nexport const DataLayer = ({ initialState, reducer, children }) => ( \n    <DataLayerContext.Provider value = { useReducer(reducer, initialState) } > { children } \n    </DataLayerContext.Provider>\n);\n\nexport const useDataLayerValue = () => useContext(DataLayerContext);","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Login from './Login';\nimport Details from \"./Details\";\nimport { getTokenFromUrl } from \"./apiConfig\";\nimport { useDataLayerValue } from \"./DataLayer\";\n\nfunction App() {\n//Pass the functions to the datalayer and pull the details\nconst [{ user, token }, dispatch] = useDataLayerValue();\n      //Run code based on a given condition\n      useEffect(() => {\n        const hash = getTokenFromUrl();\n        //Strip the hash from the url to not show\n        if (window.location.href.includes('?')) { \n          window.history.pushState({}, null, window.location.href.split('?')[0]); \n      }\n        const _token = hash.code;\n        if (_token) {\n          dispatch({\n            type: \"SET_TOKEN\",\n            token: _token\n        });\n        }\n    }, []);\n  return (\n    <div className=\"App\">\n    { token ? ( <Details /> ) : ( <Login /> ) }\n    </div>\n  );\n}\n\nexport default App;\n","export const initialState = {\n    user: null,\n    playlists: [],\n    playing: false,\n    item: null,\n    //Remove after finished developing\n    token: 'ee9693a3061dc28bf0fa'\n};\n\n//Reducer -> Listens to the data layer\nconst reducer = (state, action) => {\n    console.log(action);\n\n    //Dispatch the action and listens to the action\n    //Action -> type, [payload]\n    switch (action.type) {\n        case 'SET_USER':\n            //Listener\n            return {\n                ...state,\n                user: action.user\n            }\n        case 'SET_TOKEN':\n            return {\n                ...state,\n                token: action.token\n            };\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { DataLayer } from \"./DataLayer\";\nimport reducer, { initialState } from \"./reducer\";\nimport * as serviceWorker from './serviceWorker';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataLayer initialState = { initialState } reducer = { reducer } >\n    <App />\n    </DataLayer> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}